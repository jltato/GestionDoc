@page "/PdfViewer"
@using SUAP_PortalOficios.Views.Shared.Components
@using System.IO
@using Blazorise
@using Blazorise.Extensions
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.Net.Http.Headers
@using System.Diagnostics
@using System.Net
@using System.Security.Claims
@using SUAP_PortalOficios.Views.Shared.Components.Services
@implements IDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IHttpContextAccessor HttpContextAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAntiforgery Antiforgery
@inject HttpClientService HttpClientService



<div class="d-flex flex-column justify-content-center text-center h-100">
    <h3>@Nombre</h3>
    <div class="d-flex justify-content-center h-100">
        @if (!string.IsNullOrEmpty(src))
        {
            <iframe src="@src" class="w-100 h-100"  ></iframe>
        }
        else
        {
            <p>Cargando documento...</p>  <!-- Mensaje de carga -->
        }
    </div>
    <div class="d-flex justify-content-center mt-2">

        <Pagination>
            <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="First">
                <PaginationLink>
                    <span aria-hidden="true">Primero</span>
                </PaginationLink>
            </PaginationItem>
            <PaginationItem Disabled="@IsPageNavigationDisabled(PREVIOUS)" @onclick="Previous">
                <PaginationLink>
                    <span aria-hidden="true">«</span>
                </PaginationLink>
            </PaginationItem>
            @{
                for (var i = 1; i <= pageItems; i++)
                {
                    var pageNumberAsString = i.ToString();
                    <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                        <PaginationLink Page="@pageNumberAsString" Clicked="SetActive">
                            @pageNumberAsString
                        </PaginationLink>
                    </PaginationItem>
                }
            }
            <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Next">
                <PaginationLink>
                    <span aria-hidden="true">»</span>
                </PaginationLink>
            </PaginationItem>
            <PaginationItem Disabled="@IsPageNavigationDisabled(NEXT)" @onclick="Last">
                <PaginationLink>
                    <span aria-hidden="true">Ultimo</span>
                </PaginationLink>
            </PaginationItem>
        </Pagination>

    </div>

    <Div Class="d-flex justify-content-between mb-0">
        @if(AddPermmision)
        {
            <button type="button" class="btn btn-outline-primary " @onclick="AbrirModalAgregarArchivo"><span class="fa fa-upload me-3"></span>Agregar Archivo</button>
        }

        <button class="btn btn-outline-primary" @onclick="Imprimir"><span class="fa fa-file-pdf-o me-3"></span>Imprimir PDF</button>

        <a class="btn btn-outline-primary" href="api/Document/Download/@oficioId.ToString()"><span class="fa fa-file-zip-o me-3"></span>Descargar ZIP</a>

        @if (DeletePermission)
        {
            <button type="button" class="btn btn-outline-danger" @onclick="AbrirModalEliminarArchivo"><span class="fa fa-xmark me-3"></span>Eliminar Archivo</button>
        }


        <!-- Modal para agregar Arhivos -->
        <div class="modal fade" id="ModalAgregar" tabindex="-1" role="dialog" aria-labelledby="ModalAgregar" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLongTitle">Agregar Archivo</h5>
                        <button type="button" class="btn-close" @onclick="CerrarModalAgregarArchivo"></button>
                    </div>
                    <div class="modal-body">

                        @FilePickerRenderFragment

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CerrarModalAgregarArchivo">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal para eliminar Arhivos -->
        <div class="modal fade " id="EliminarModal" tabindex="-1" role="dialog" aria-labelledby="EliminarModal" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header  ">
                        <button class=" btn-close float-end" @onclick="CerrarModalEliminarArchivo"></button>
                    </div>
                    <div class="modal-body text-center">
                        <h3> Esta seguro que desea eliminar este archivo?</h3>
                    </div>
                    <div class="modal-footer">
                        <button @onclick="Eliminar" Class="btn btn-danger">Eliminar Archivo</button>
                    </div>
                </div>
            </div>
        </div>
    </Div>
</div>


@code {
    [Parameter]
    public int oficioId { get; set; }
    [Parameter]
    public bool DeletePermission { get; set; } = false;
    [Parameter]
    public bool AddPermmision { get; set; } = true;

    // Variable para contener la URL del archivo PDF
    private string src = string.Empty;
    private int totalDocuments;
    private string? Nombre;

    private DotNetObjectReference<PdfViewer>? objRef;

    private FilePikerCustom filePickerRef;

    protected override async Task OnInitializedAsync()
    {
        await LoadDocument(oficioId, int.Parse(currentPage)-1);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        objRef = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("registerPdfViewerInstance", objRef);
    }

    [JSInvokable("ReloadDocument")]
    public async Task ReloadDocument(){
        await LoadDocument(oficioId, int.Parse(currentPage) - 1);
    }

    private async Task LoadDocument(int oficioId, int documentId)
    {
        using (var client = HttpClientService.CreateConfiguredHttpClient())
        {
            var response = await client.GetAsync($"api/Document/GetDocumentPdf?IdOficio={oficioId}&id={documentId}");
            if (response.IsSuccessStatusCode)
            {
                if (response.Headers.TryGetValues("X-Total-Documents", out var values))
                {
                    pageItems = int.Parse(values.First());
                }
                if (response.Headers.TryGetValues("Nombre", out var nombre))
                {
                    Nombre = nombre.First().ToString();
                }

                // Asignar la URL directamente al iframe
                src = $"api/Document/GetDocumentPdf?IdOficio={oficioId}&id={documentId}";

                StateHasChanged();
            }
            else if (response.StatusCode == HttpStatusCode.NotFound)
            {
                if (response.Headers.TryGetValues("X-Total-Documents", out var values))
                {                        
                    pageItems = int.Parse(values.First());                    
                }
                src = "/Images/PdfError.pdf";
                StateHasChanged();
            }
        }
    }

    private async Task Imprimir()
    {
        using (var client = HttpClientService.CreateConfiguredHttpClient())
        {
            try
            {
                var response = await client.GetAsync($"api/Document/CombineAndPrint?Id={oficioId}");
                if (response.IsSuccessStatusCode)
                {                    
                    var base64Pdf = await response.Content.ReadAsStringAsync();
                    // Pasar el Data URI a JavaScript para imprimir el PDF

                   await JSRuntime.InvokeVoidAsync("printPdfDirectly", base64Pdf);
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "¡No se pudo imprimir el Archivo!");
                }
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.Message, ex);
            }            
        }
     }


    //// <summary> //////////////////////////////////////////////
    /////////////// AGREGADO Y ELIMINADO DE ARCHIVOS ////////////
    /// </summary> //////////////////////////////////////////////

    private async Task Eliminar()
    {
        var archivoPdf = int.Parse(currentPage) - 1;
        if (archivoPdf == 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "¡No se puede eliminar el archivo principal!");

        }
        else
        {
            using (var client = HttpClientService.CreateConfiguredHttpClient())
            {
                var response = await client.DeleteAsync($"api/Document/DeleteDocument?IdOficio={oficioId}&id={archivoPdf}");
                if (response.IsSuccessStatusCode)
                {

                    await Previous();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "¡No se pudo eliminar el Archivo!");
                }
            }
        }

        await JSRuntime.InvokeVoidAsync("HideModal", "#EliminarModal");
    }

    private RenderFragment? FilePickerRenderFragment => builder =>
    {
        builder.OpenComponent(0, typeof(FilePikerCustom));
        builder.AddAttribute(1, "ShowMode", FilePickerShowMode.List);
        builder.AddAttribute(2, "indice", oficioId);
        builder.AddComponentReferenceCapture(3, inst => filePickerRef = (FilePikerCustom)inst);
        builder.CloseComponent();
    };

    private async Task AbrirModalAgregarArchivo()
    {
        await JSRuntime.InvokeVoidAsync("ShowModal", "#ModalAgregar");
        await filePickerRef.ResetFilePicker();
        StateHasChanged();
    }

    private async Task CerrarModalAgregarArchivo()
    {
        await JSRuntime.InvokeVoidAsync("HideModal", "#ModalAgregar");
        await LoadDocument(oficioId, 0);
    }

    private async Task AbrirModalEliminarArchivo()
    {
        await JSRuntime.InvokeVoidAsync("ShowModal", "#EliminarModal");
    }

    private async Task CerrarModalEliminarArchivo()
    {
        await JSRuntime.InvokeVoidAsync("HideModal", "#EliminarModal");
    }

    /// <summary>////////////////////////////////////////////////////////
    /// /////////////////// PAGINACION /////////////////////////////////
    /// </summary> ////////////////////////////////////////////////////

    private const string PREVIOUS = "previous";
    private const string NEXT = "next";
    private string currentPage = "1";
    private int pageItems = 1;

    private bool IsActive(string page)
        => currentPage == page;

    private bool IsPageNavigationDisabled(string navigation)
    {
        if (navigation.Equals(PREVIOUS))
        {
            return currentPage.Equals("1");
        }
        else if (navigation.Equals(NEXT))
        {
            return currentPage.Equals(pageItems.ToString());
        }
        return false;
    }

    private async Task First()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt > 1)
        {
            currentPage = (1).ToString();
            await LoadDocument(oficioId, 0);
        }
    }

    private async Task Previous()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt > 1)
        {
            currentPage = (currentPageAsInt - 1).ToString();
            await LoadDocument(oficioId, currentPageAsInt - 2);
        }
    }

    private async Task Next()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt < pageItems)
        {
            currentPage = (currentPageAsInt + 1).ToString();
            await LoadDocument(oficioId, currentPageAsInt);
        }
    }

    private async Task Last()
    {
        var currentPageAsInt = int.Parse(currentPage);
        if (currentPageAsInt < pageItems)
        {
            currentPage = (pageItems).ToString();
            await LoadDocument(oficioId, (pageItems-1));
        }
    }

    private async Task SetActive(string page)
    {
        currentPage = page;
        await LoadDocument(oficioId, int.Parse(page)-1);
    }
  
    // Implementación del método Dispose para eliminar la suscripción
    public async void Dispose()
    {
        // Llamada a JavaScript para eliminar el evento "ReceiveMessage" cuando se destruye el componente
        await JSRuntime.InvokeVoidAsync("removeReceivePdfHandler");
    }
}

    <script>
        function ShowModal(modalId) {
            $(modalId).modal('show');
        };

        function HideModal(modalId) {
            $(modalId).modal('hide');
        };
            // Función para registrar el objeto Blazor
        window.registerPdfViewerInstance = function (pdfViewerInstance) {
            // Limpiar cualquier suscripción existente para evitar duplicados
            if (window.signalRConnection) {
                window.signalRConnection.off("ReceivePdfUpdate");
            }
            // Asignar la instancia específica para PdfViewer
            window.pdfViewerInstance = pdfViewerInstance;

            // Volver a registrar el evento solo para PdfViewer
            window.signalRConnection.on("ReceivePdfUpdate", () => {
                if (window.pdfViewerInstance) {
                    window.pdfViewerInstance.invokeMethodAsync("ReloadDocument")
                        .then(() => console.log("ReloadDocument invocado en PdfViewer"))
                        .catch(err => console.error("Error al invocar ReloadDocument:", err));
                }
            });
        };

            // Función para quitar el manejador de eventos "ReceivePdfUpdate" al finalizar
        window.removeReceivePdfHandler = function () {
            if (window.signalRConnection) {
                window.signalRConnection.off("ReceivePdfUpdate");
            }
        };

        // funcion para imprimir todo el oficio
        function printPdfDirectly(base64Pdf) {
                var pdfWindow = window.open('', '_blank'); // Crear una nueva ventana

                if (!pdfWindow) {
                    alert("No se pudo abrir la ventana emergente. Verifica las configuraciones del navegador.");
                    return;
                }

                var dataUri = 'data:application/pdf;base64,' + base64Pdf;

                pdfWindow.document.write('<html><head><title>Imprimir PDF</title></head><body>');
                pdfWindow.document.write('<iframe src="' + dataUri + '" width="100%" height="100%" style="border: none;"></iframe>');
                pdfWindow.document.write('</body></html>');

                pdfWindow.document.close();
                pdfWindow.focus();

                // Retrasar la impresión para asegurarse de que el PDF esté cargado
                setTimeout(function() {
                try {
                    var iframe = pdfWindow.document.getElementById('pdfIframe');
                    if (iframe) {
                        iframe.contentWindow.print();  // Imprimir el contenido del iframe
                    } else {
                        console.error("No se encontró el iframe.");
                    }
                } catch (e) {
                    console.error("No se pudo imprimir el documento: ", e);
                }
            }, 1500); 
        }
</script>



